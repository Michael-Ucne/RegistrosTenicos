@page "/Ticket"
@inject TicketsServices ticketsService
@inject TecnicosServices tecnicosService
@inject ClientesServices clientesService
@inject NavigationManager navigationManager
@using System.Linq.Expressions
@rendermode InteractiveServer

<PageTitle>Lista de Tickets</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header text-center bg-primary text-white">
            <h5 class="card-title text-center">
                <strong>Consulta de Tickets</strong>
            </h5>
        </div>

        <div class="card-body">
            <div class="d-flex justify-content-end mb-2">
                <a href="@AppRoutes.TICreate" class="btn btn-success">
                    <span class="bi bi-plus-square"></span> Crear
                </a>
            </div>

            @* Filtros en una sola fila *@
            <div class="row align-items-end g-2">
                <div class="col-md-2">
                    <label class="form-label"><strong>Fecha Desde</strong></label>
                    <InputDate @bind-Value="FechaDesde" class="form-control form-control-sm" />
                </div>
                <div class="col-md-2">
                    <label class="form-label"><strong>Fecha Hasta</strong></label>
                    <InputDate @bind-Value="FechaHasta" class="form-control form-control-sm" />
                </div>
                <div class="col-md-2">
                    <label class="form-label"><strong>Filtrar por</strong></label>
                    <InputSelect class="form-select form-select-sm" @bind-Value="Filtro">
                        <option value="">Elija una opci&oacute;n</option>
                        <option value="Prioridad">Prioridad</option>
                        <option value="Cliente">Nombre Cliente</option>
                        <option value="Tecnico">Nombre T&eacute;cnico</option>
                        <option value="Asunto">Asunto</option>
                        <option value="Descripcion">Descripci&oacute;n</option>
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <label class="form-label"><strong>B&uacute;squeda</strong></label>
                    <input class="form-control form-control-sm" @bind="ValorFiltro" placeholder="Buscar..." />
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-primary w-100 bi bi-search" @onclick="Buscar">
                        Buscar
                    </button>
                </div>
            </div>

            <table class="table table-striped table-hover table-bordered mt-4">
                <thead class="table text-black">
                    <tr>
                        <th>Ticket ID</th>
                        <th>Fecha</th>
                        <th>Prioridad</th>
                        <th>Cliente</th>
                        <th>Asunto</th>
                        <th>Descripci&oacute;n</th>
                        <th>Tiempo Invertido</th>
                        <th>T&eacute;cnico</th>
                        <th>Editar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in Tickets)
                    {
                        <tr>
                            <td>@ticket.TicketId</td>
                            <td>@ticket.Fecha.ToString("dd/MM/yyyy")</td>
                            <td>@prioridades[ticket.Prioridad - 1]</td>
                            <td>@Clientes.Find(c => c.ClienteId == ticket.ClienteId)?.ClienteName</td>
                            <td>@ticket.Asunto</td>
                            <td>@ticket.Descripcion</td>
                            <td>@ticket.TiempoInvertido</td>
                            <td>@Tecnicos.Find(t => t.TecnicoId == ticket.TecnicoId)?.TecnicoName</td>
                            <td class="text-center">
                                <a href="@AppRoutes.TIEdit/@ticket.TicketId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;
    public DateTime? FechaDesde { get; set; }
    public DateTime? FechaHasta { get; set; }

    public List<Tickets> Tickets { get; set; } = new List<Tickets>();
    public List<Tecnicos> Tecnicos { get; set; } = new List<Tecnicos>();
    public List<Clientes> Clientes { get; set; } = new List<Clientes>();

    public List<string> prioridades = new List<string> { "Baja", "Media", "Alta" };

    protected override async Task OnInitializedAsync()
    {
        Tickets = await ticketsService.Listar(t => t.TicketId > 0);
        Clientes = await clientesService.Listar(c => c.ClienteId > 0);
        Tecnicos = await tecnicosService.Listar(t => t.TecnicoId > 0);
    }

    public async Task Buscar()
    {
        Expression<Func<Tickets, bool>> filtroExp = t => t.TicketId > 0;

        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {
            if (Filtro == "Asunto")
                filtroExp = t => t.Asunto != null && t.Asunto.Contains(ValorFiltro);
            else if (Filtro == "Descripcion")
                filtroExp = t => t.Descripcion !=null && t.Descripcion.Contains(ValorFiltro);
            else if (Filtro == "Cliente")
            {
                var cliente = Clientes.FirstOrDefault(c => c.ClienteName == ValorFiltro);
                if (cliente != null)
                    filtroExp = t => t.ClienteId == cliente.ClienteId;
            }
            else if (Filtro == "Tecnico")
            {
                var tecnico = Tecnicos.FirstOrDefault(c => c.TecnicoName == ValorFiltro);
                if (tecnico != null)
                    filtroExp = t => t.TecnicoId == tecnico.TecnicoId;
            }
            else if (Filtro == "Prioridad")
            {
                var index = prioridades.FindIndex(p => p == ValorFiltro);
                if (index >= 0)
                    filtroExp = t => t.Prioridad == index + 1;
            }
        }

        var lista = await ticketsService.Listar(filtroExp);

        if (FechaDesde.HasValue)
            lista = lista.Where(t => t.Fecha >= FechaDesde.Value).ToList();
        if (FechaHasta.HasValue)
            lista = lista.Where(t => t.Fecha <= FechaHasta.Value).ToList();

        Tickets = lista;
    }
}
