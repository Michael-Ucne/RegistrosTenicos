@page "/Cliente/Delete/{ClienteId:int}"
@inject ClientesServices clientesServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Eliminar Cliente</PageTitle>

<EditForm Model="Cliente" OnValidSubmit="Eliminar">
    <div class="card shadow-lg">
        <div class="card-header text-center bg-primary text-white">
            <h5 class="card-title">
                <strong>
                    Eliminar Cliente
                </strong>
            </h5>
        </div>
        <div class="card-subtitle text-center bg-danger text-white">
            <h5 class="card-title">&#191;Est&aacute;s seguro de querer eliminar a este Cliente?</h5>
        </div>
        <div class="card-body">

            @* ClienteId *@
            <div class="mb-3">
                <label class="form-label">
                    <strong>Cliente ID: </strong>
                    @ClienteId
                </label>
            </div>

            @* Nombre *@
            <div class="mb-3">
                <label class="form-label">
                    <strong>Nombre: </strong>
                    @Cliente?.ClienteName
                </label>
            </div>

            @* RNC *@
            <div class="mb-3">
                <label class="form-label">
                    <strong>RNC: </strong>
                    @Cliente?.RNC
                </label>
            </div>

            @* Footer *@
            <div class="card-footer text-center mt-2">
                <div class="btn-group" role="group" aria-label="Acciones unidas">
                    <button type="submit" class="btn btn-outline-danger bi bi-trash"> Eliminar</button>

                    <a href="@AppRoutes.CEdit/@Cliente?.ClienteId" class="btn btn-outline-secondary">
                        <span class="bi bi-arrow-left"></span> Volver
                    </a>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public int ClienteId { get; set; }

    private Clientes? Cliente { get; set; } = new Clientes();
    List<Clientes> clientes { get; set; } = new List<Clientes>();

    protected override async Task OnInitializedAsync()
    {
        Cliente = await clientesServices.Buscar(ClienteId);
    }

    private async Task Eliminar()
    {
        await clientesServices.Eliminar(ClienteId);
        clientes = await clientesServices.Listar(c => c != null);
        navigationManager.NavigateTo(AppRoutes.CIndex);
    }
}
