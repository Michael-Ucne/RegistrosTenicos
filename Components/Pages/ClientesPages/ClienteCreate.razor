@page "/Cliente/Create"
@inject ClientesServices clientesServices
@inject TecnicosServices tecnicosServices
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Crear Cliente</PageTitle>

<EditForm Model="Cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white">
                <h5 class="card-title">
                    <strong>Registrar Cliente</strong>
                </h5>
            </div>

            <div class="card-body">

                @* ClienteId *@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Cliente ID</strong>
                        <input class="form-control" @bind="Cliente.ClienteId" readonly>
                    </label>
                </div>

                @* Nombre *@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Nombre</strong>
                        <InputText class="form-control" @bind-Value="Cliente.ClienteName" />
                        <ValidationMessage For="(() => Cliente.ClienteName)" />
                    </label>
                </div>

                @* Direccion *@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Direccion</strong>
                        <InputText class="form-control" @bind-Value="Cliente.Direccion" />
                        <ValidationMessage For="(() => Cliente.Direccion)" />
                    </label>
                </div>

                @* RNC *@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>RNC</strong>
                        <InputText class="form-control" @bind-Value="Cliente.RNC" />
                        <ValidationMessage For="(() => Cliente.RNC)" />
                    </label>
                </div>

                @* Limite de Credito *@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Limite de Credito</strong>
                        <InputNumber class="form-control" @bind-Value="Cliente.LimiteCredito" />
                        <ValidationMessage For="(() => Cliente.LimiteCredito)" />
                    </label>
                </div>

                @* Fecha Ingreso *@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Fecha Ingreso</strong>
                        <InputDate class="form-control" @bind-Value="Cliente.FechaIngreso" />
                        <ValidationMessage For="(() => Cliente.FechaIngreso)" />
                    </label>
                </div>

                @* Tecnico Encargado *@
                <div class="mb-3">
                    <label class="form-label">
                        <strong>Tecnico Encargado</strong>
                        <InputSelect class="form-control" @bind-Value="Cliente.TecnicoEncargadoId">
                            <option value="">-- Seleccione un tecnico --</option>
                            @foreach (var tecnico in Tecnicos)
                            {
                                <option value="@tecnico.TecnicoId">@tecnico.TecnicoName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => Cliente.TecnicoEncargadoId)" />
                    </label>
                </div>

                @* Footer *@
                <div class="card-footer text-center mt-2">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary bi bi-file-earmark-plus" @onclick="Nuevo"> Limpiar</button>
                        <button type="submit" class="btn btn-outline-success bi bi-floppy"> Guardar</button>
                        <a href="@AppRoutes.CIndex" class="btn btn-outline-secondary">
                            <span class="bi bi-arrow-left"></span> Volver
                        </a>
                    </div>
                </div>

            </div>
        </div>
    </div>
</EditForm>

@code {

    private string Mensaje = "";

    private Clientes Cliente { get; set; } = new Clientes();
    private List<Tecnicos> Tecnicos { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Tecnicos = await tecnicosServices.Listar(t => true);
    }

    private async Task Guardar()
    {
        var clientesConNombre = await clientesServices.Listar(c => c.ClienteName == Cliente.ClienteName);
        if (clientesConNombre.Count == 1 && clientesConNombre[0].ClienteId != Cliente.ClienteId)
        {
            Mensaje = "Ya existe un cliente con ese nombre";
            return;
        }

        var clientesConRnc = await clientesServices.Listar(c => c.RNC == Cliente.RNC);
        if (clientesConRnc.Count == 1 && clientesConRnc[0].ClienteId != Cliente.ClienteId)
        {
            Mensaje = "Ya existe un cliente con ese rnc";
            return;
        }

        await clientesServices.Guardar(Cliente);
        navigationManager.NavigateTo(AppRoutes.CIndex);
    }


    private void Nuevo()
    {
        Cliente = new Clientes();
        StateHasChanged();
    }
}
